<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
     xmlns:aop="http://www.springframework.org/schema/aop"
     xmlns:tx="http://www.springframework.org/schema/tx"
     xmlns:context="http://www.springframework.org/schema/context"
     xsi:schemaLocation="
     http://www.springframework.org/schema/beans 
     http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
     http://www.springframework.org/schema/tx
     http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
     http://www.springframework.org/schema/aop 
     http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
     http://www.springframework.org/schema/context
     http://www.springframework.org/schema/context/spring-context-3.0.xsd">     
            
       <!-- Properties文件读取配置，base的properties -->  
       <context:property-placeholder location="classpath:jdbc.properties"/>   
       
       <!-- JNDI获取数据源(使用dbcp连接池) -->    
       <!-- 因为我们使用的这个数据源是采用 dbcp连接池，对于连接池来说，整个应用中只有一个，
            所以作用域需要设置成单例 因为获取数据源是非常消耗性能，所以我们也要采用单例模式-->
      <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close" 
      scope="singleton">
           <property name="driverClassName" value="${driverClassName}" />  
           <property name="url" value="${url}" />  
           <property name="username" value="${username}" />  
           <property name="password" value="${password}" />  
      </bean>       
       <!-- 事务配置  在需要事务管理的地方加@Transactional 注解或者AOP进行事务处理-->
       <bean id="transactionManager" 
         class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
       </bean>        
       <!-- 配置mybitas SqlSessionFactoryBean  -->
       <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">  
           <property name="dataSource" ref="dataSource" />  
           <property name="configLocation" value="classpath:mybatis-config.xml" />  
           <property name="mapperLocations" value="classpath:com/zhl/dao/*.xml"/> 
       </bean> 
       <!--配置一个可以进行批量执行的sqlSession  -->
		<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		    <constructor-arg name="sqlSessionFactory" ref="sqlSessionFactoryBean"></constructor-arg>
		    <constructor-arg name="executorType" value="BATCH"></constructor-arg>
		</bean>
        <!-- 把sqlSessionTemplate注入测试类 -->
        <bean id="userDao" class="com.zhl.dao.UserDao">
            <property name="sqlSessionTemplate" ref="sqlSessionTemplate"/>  
        </bean>
</beans>
————————————————
/**
 *  数据源配置类
 */
 @Configuration
 @MapperScan(basePackages={"com.zhl.dao.**.dao"},sqlSessionFactoryRef="sqlSessionFactory-dataSource")
 public class DataSourceConfig{
 	@Primary
 	@Bean(name={"sqlSessionFactory-dynamic"})
 	public SqlSessionFactory sqlSessionFactory(@Qualifier("dynamic")DataSource dataSource){
 		GlobalConfig gcfg = new GloablConfig();
 		gcfg.setDbConfig(new  DbConfig().setDbType(DbType.ORACLE));
 		MybatisConfiguration mcfg = new MybatisConfiguration();
 		mcfg.setJdbcTypeForNull(jdbcType.NULL);
 		final MybatisSqlSessionFactoryBean msfb = new MybatisSqlSessionFactoryBean();
 		msfb.setDataSource(dataSource);
 		//msfb.setPlugins(new intercptor[]{new MyPaginationInterceptor(),new MySqlPrintInterceptor});
 		msfb.setGlobalConfig(gcfg);
 		msfb.setConfiguration(mcfg);
 		return msfb.getObject();
 	}
	@Bean("batchSqlSessionTemplate")
	public SqlSessionTemplate setSqlSessionTemplate(@Qualifier("sqlSessionFactory-dataSource")SqlSessionFactory sqlSessionFactory){
		return new SqlSessionTemplate(sqlSessionFactory,ExecutoryType.BATCH);
	}
 }
————————————————
